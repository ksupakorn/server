connect  con1, localhost, user1, , ;
select "MARKER_BEGIN" as marker;
marker
MARKER_BEGIN
select "This is simple statement one" as payload;
payload
This is simple statement one
select "This is simple statement two" as payload;
payload
This is simple statement two
select "This is the first part of a multi query" as payload;
select "And this is the second part of a multi query" as payload;
select "With a third part to make things complete" as payload;
$$
payload
This is the first part of a multi query
payload
And this is the second part of a multi query
payload
With a third part to make things complete
select "MARKER_END" as marker;
marker
MARKER_END
select "Con1 is done with payload" as status;
status
Con1 is done with payload
connection default;
set @con1_tid = (select thread_id from performance_schema.threads
where processlist_user = 'user1');
select (@con1_tid is not null) as expected;
expected
1
set @marker_begin = (select event_id from performance_schema.events_statements_history_long
where sql_text like "%MARKER_BEGIN%" and thread_id = @con1_tid);
select (@marker_begin is not null) as expected;
expected
1
set @marker_end = (select end_event_id from performance_schema.events_statements_history_long
where sql_text like "%MARKER_END%" and thread_id = @con1_tid);
select (@marker_end is not null) as expected;
expected
1
show status like "performance_schema%";
Variable_name	Value
Performance_schema_accounts_lost	0
Performance_schema_cond_classes_lost	0
Performance_schema_cond_instances_lost	0
Performance_schema_digest_lost	0
Performance_schema_file_classes_lost	0
Performance_schema_file_handles_lost	0
Performance_schema_file_instances_lost	0
Performance_schema_hosts_lost	0
Performance_schema_locker_lost	0
Performance_schema_mutex_classes_lost	0
Performance_schema_mutex_instances_lost	0
Performance_schema_rwlock_classes_lost	0
Performance_schema_rwlock_instances_lost	0
Performance_schema_session_connect_attrs_lost	0
Performance_schema_socket_classes_lost	0
Performance_schema_socket_instances_lost	0
Performance_schema_stage_classes_lost	0
Performance_schema_statement_classes_lost	0
Performance_schema_table_handles_lost	0
Performance_schema_table_instances_lost	0
Performance_schema_thread_classes_lost	0
Performance_schema_thread_instances_lost	0
Performance_schema_users_lost	0
select * from (
(
select (event_id - @marker_begin) as relative_event_id,
(end_event_id - @marker_begin) as relative_end_event_id,
event_name,
sql_text as comment,
nesting_event_type,
(nesting_event_id - @marker_begin) as relative_nesting_event_id
from performance_schema.events_statements_history_long
where (thread_id = @con1_tid)
and (@marker_begin <= event_id)
and (end_event_id <= @marker_end)
)
union
(
select (event_id - @marker_begin) as relative_event_id,
(end_event_id - @marker_begin) as relative_end_event_id,
event_name,
"(stage)" as comment,
nesting_event_type,
(nesting_event_id - @marker_begin) as relative_nesting_event_id
from performance_schema.events_stages_history_long
where (thread_id = @con1_tid)
and (@marker_begin <= event_id)
and (end_event_id <= @marker_end)
)
union
(
select (event_id - @marker_begin) as relative_event_id,
(end_event_id - @marker_begin) as relative_end_event_id,
event_name,
operation as comment,
nesting_event_type,
(nesting_event_id - @marker_begin) as relative_nesting_event_id
from performance_schema.events_waits_history_long
where (thread_id = @con1_tid)
and (@marker_begin <= event_id)
and (end_event_id <= @marker_end)
)
) all_events
order by relative_event_id asc;
relative_event_id	relative_end_event_id	event_name	comment	nesting_event_type	relative_nesting_event_id
0	22	statement/sql/select	select "MARKER_BEGIN" as marker	NULL	NULL
1	6	stage/sql/Init	(stage)	STATEMENT	0
2	2	wait/io/socket/sql/client_connection	recv	STAGE	1
3	3	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	1
4	4	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STAGE	1
5	5	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	1
6	6	wait/io/file/sql/query_log	write	STAGE	1
7	7	stage/sql/Checking permissions	(stage)	STATEMENT	0
8	8	stage/sql/Opening tables	(stage)	STATEMENT	0
9	9	stage/sql/After opening tables	(stage)	STATEMENT	0
10	10	stage/sql/Init	(stage)	STATEMENT	0
11	11	stage/sql/Optimizing	(stage)	STATEMENT	0
12	12	stage/sql/Executing	(stage)	STATEMENT	0
13	13	stage/sql/End of update loop	(stage)	STATEMENT	0
14	14	stage/sql/Query end	(stage)	STATEMENT	0
15	15	stage/sql/Commit	(stage)	STATEMENT	0
16	16	stage/sql/Closing tables	(stage)	STATEMENT	0
17	17	stage/sql/Starting cleanup	(stage)	STATEMENT	0
18	18	stage/sql/Freeing items	(stage)	STATEMENT	0
19	19	wait/io/socket/sql/client_connection	send	STATEMENT	0
20	20	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	0
21	22	stage/sql/Reset for next command	(stage)	STATEMENT	0
22	22	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	21
23	23	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STATEMENT	0
24	24	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	0
25	25	idle	idle	NULL	NULL
26	48	statement/sql/select	select "This is simple statement one" as payload	NULL	NULL
27	32	stage/sql/Init	(stage)	STATEMENT	26
28	28	wait/io/socket/sql/client_connection	recv	STAGE	27
29	29	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	27
30	30	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STAGE	27
31	31	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	27
32	32	wait/io/file/sql/query_log	write	STAGE	27
33	33	stage/sql/Checking permissions	(stage)	STATEMENT	26
34	34	stage/sql/Opening tables	(stage)	STATEMENT	26
35	35	stage/sql/After opening tables	(stage)	STATEMENT	26
36	36	stage/sql/Init	(stage)	STATEMENT	26
37	37	stage/sql/Optimizing	(stage)	STATEMENT	26
38	38	stage/sql/Executing	(stage)	STATEMENT	26
39	39	stage/sql/End of update loop	(stage)	STATEMENT	26
40	40	stage/sql/Query end	(stage)	STATEMENT	26
41	41	stage/sql/Commit	(stage)	STATEMENT	26
42	42	stage/sql/Closing tables	(stage)	STATEMENT	26
43	43	stage/sql/Starting cleanup	(stage)	STATEMENT	26
44	44	stage/sql/Freeing items	(stage)	STATEMENT	26
45	45	wait/io/socket/sql/client_connection	send	STATEMENT	26
46	46	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	26
47	48	stage/sql/Reset for next command	(stage)	STATEMENT	26
48	48	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	47
49	49	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STATEMENT	26
50	50	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	26
51	51	idle	idle	NULL	NULL
52	74	statement/sql/select	select "This is simple statement two" as payload	NULL	NULL
53	58	stage/sql/Init	(stage)	STATEMENT	52
54	54	wait/io/socket/sql/client_connection	recv	STAGE	53
55	55	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	53
56	56	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STAGE	53
57	57	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	53
58	58	wait/io/file/sql/query_log	write	STAGE	53
59	59	stage/sql/Checking permissions	(stage)	STATEMENT	52
60	60	stage/sql/Opening tables	(stage)	STATEMENT	52
61	61	stage/sql/After opening tables	(stage)	STATEMENT	52
62	62	stage/sql/Init	(stage)	STATEMENT	52
63	63	stage/sql/Optimizing	(stage)	STATEMENT	52
64	64	stage/sql/Executing	(stage)	STATEMENT	52
65	65	stage/sql/End of update loop	(stage)	STATEMENT	52
66	66	stage/sql/Query end	(stage)	STATEMENT	52
67	67	stage/sql/Commit	(stage)	STATEMENT	52
68	68	stage/sql/Closing tables	(stage)	STATEMENT	52
69	69	stage/sql/Starting cleanup	(stage)	STATEMENT	52
70	70	stage/sql/Freeing items	(stage)	STATEMENT	52
71	71	wait/io/socket/sql/client_connection	send	STATEMENT	52
72	72	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	52
73	74	stage/sql/Reset for next command	(stage)	STATEMENT	52
74	74	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	73
75	75	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STATEMENT	52
76	76	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	52
77	77	idle	idle	NULL	NULL
78	99	statement/sql/select	select "This is the first part of a multi query" as payload;
select "And this is the second part of a multi query" as payload;
select "With a third part to make things complete" as payload	NULL	NULL
79	85	stage/sql/Init	(stage)	STATEMENT	78
80	80	wait/io/socket/sql/client_connection	recv	STAGE	79
81	81	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	79
82	82	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STAGE	79
83	83	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	79
84	84	wait/io/file/sql/query_log	write	STAGE	79
85	85	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	79
86	86	stage/sql/Checking permissions	(stage)	STATEMENT	78
87	87	stage/sql/Opening tables	(stage)	STATEMENT	78
88	88	stage/sql/After opening tables	(stage)	STATEMENT	78
89	89	stage/sql/Init	(stage)	STATEMENT	78
90	90	stage/sql/Optimizing	(stage)	STATEMENT	78
91	91	stage/sql/Executing	(stage)	STATEMENT	78
92	92	stage/sql/End of update loop	(stage)	STATEMENT	78
93	93	stage/sql/Query end	(stage)	STATEMENT	78
94	94	stage/sql/Commit	(stage)	STATEMENT	78
95	95	stage/sql/Closing tables	(stage)	STATEMENT	78
96	96	stage/sql/Starting cleanup	(stage)	STATEMENT	78
97	99	stage/sql/Freeing items	(stage)	STATEMENT	78
98	98	wait/io/socket/sql/client_connection	send	STAGE	97
99	99	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STAGE	97
100	117	statement/sql/select	select "And this is the second part of a multi query" as payload;
select "With a third part to make things complete" as payload	NULL	NULL
101	103	stage/sql/Init	(stage)	STATEMENT	100
102	102	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	101
103	103	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	101
104	104	stage/sql/Checking permissions	(stage)	STATEMENT	100
105	105	stage/sql/Opening tables	(stage)	STATEMENT	100
106	106	stage/sql/After opening tables	(stage)	STATEMENT	100
107	107	stage/sql/Init	(stage)	STATEMENT	100
108	108	stage/sql/Optimizing	(stage)	STATEMENT	100
109	109	stage/sql/Executing	(stage)	STATEMENT	100
110	110	stage/sql/End of update loop	(stage)	STATEMENT	100
111	111	stage/sql/Query end	(stage)	STATEMENT	100
112	112	stage/sql/Commit	(stage)	STATEMENT	100
113	113	stage/sql/Closing tables	(stage)	STATEMENT	100
114	114	stage/sql/Starting cleanup	(stage)	STATEMENT	100
115	117	stage/sql/Freeing items	(stage)	STATEMENT	100
116	116	wait/io/socket/sql/client_connection	send	STAGE	115
117	117	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STAGE	115
118	136	statement/sql/select	select "With a third part to make things complete" as payload	NULL	NULL
119	120	stage/sql/Init	(stage)	STATEMENT	118
120	120	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	119
121	121	stage/sql/Checking permissions	(stage)	STATEMENT	118
122	122	stage/sql/Opening tables	(stage)	STATEMENT	118
123	123	stage/sql/After opening tables	(stage)	STATEMENT	118
124	124	stage/sql/Init	(stage)	STATEMENT	118
125	125	stage/sql/Optimizing	(stage)	STATEMENT	118
126	126	stage/sql/Executing	(stage)	STATEMENT	118
127	127	stage/sql/End of update loop	(stage)	STATEMENT	118
128	128	stage/sql/Query end	(stage)	STATEMENT	118
129	129	stage/sql/Commit	(stage)	STATEMENT	118
130	130	stage/sql/Closing tables	(stage)	STATEMENT	118
131	131	stage/sql/Starting cleanup	(stage)	STATEMENT	118
132	132	stage/sql/Freeing items	(stage)	STATEMENT	118
133	133	wait/io/socket/sql/client_connection	send	STATEMENT	118
134	134	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	118
135	136	stage/sql/Reset for next command	(stage)	STATEMENT	118
136	136	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	135
137	137	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STATEMENT	118
138	138	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	118
139	139	idle	idle	NULL	NULL
140	162	statement/sql/select	select "MARKER_END" as marker	NULL	NULL
141	146	stage/sql/Init	(stage)	STATEMENT	140
142	142	wait/io/socket/sql/client_connection	recv	STAGE	141
143	143	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	141
144	144	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STAGE	141
145	145	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	141
146	146	wait/io/file/sql/query_log	write	STAGE	141
147	147	stage/sql/Checking permissions	(stage)	STATEMENT	140
148	148	stage/sql/Opening tables	(stage)	STATEMENT	140
149	149	stage/sql/After opening tables	(stage)	STATEMENT	140
150	150	stage/sql/Init	(stage)	STATEMENT	140
151	151	stage/sql/Optimizing	(stage)	STATEMENT	140
152	152	stage/sql/Executing	(stage)	STATEMENT	140
153	153	stage/sql/End of update loop	(stage)	STATEMENT	140
154	154	stage/sql/Query end	(stage)	STATEMENT	140
155	155	stage/sql/Commit	(stage)	STATEMENT	140
156	156	stage/sql/Closing tables	(stage)	STATEMENT	140
157	157	stage/sql/Starting cleanup	(stage)	STATEMENT	140
158	158	stage/sql/Freeing items	(stage)	STATEMENT	140
159	159	wait/io/socket/sql/client_connection	send	STATEMENT	140
160	160	wait/synch/mutex/sql/THD::LOCK_thd_kill	lock	STATEMENT	140
161	162	stage/sql/Reset for next command	(stage)	STATEMENT	140
162	162	wait/synch/mutex/sql/THD::LOCK_thd_data	lock	STAGE	161
disconnect con1;
